#@ load("funcs.lib.yml", "map_host_linstor", "map_host_lvm", "name", "node", "initimage", "controllerhostport", "registry", "controllerimage", "satelliteimage")
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: #@ node()
  namespace: kube-system
spec:
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: #@ name()
      app.kubernetes.io/component: #@ node()
  template:
    metadata:
      labels:
        app.kubernetes.io/name: #@ name()
        app.kubernetes.io/component: #@ node()
    spec:
      priorityClassName: system-node-critical
      restartPolicy: Always
      terminationGracePeriodSeconds: 0
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
        - name: init
          image: #@ initimage()
          imagePullPolicy: Always
          securityContext:
            privileged: true
          resources:
            #! requests:
            #!   cpu: 50m
            #!   memory: 50Mi
            limits:
              cpu: 100m
              memory: 100Mi
          env:
            - name: THIS_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: THIS_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: THIS_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LS_CONTROLLERS
              value: #@ controllerhostport()
            - name: TIMEOUT
              value: '3600'
            - name: REGISTRY
              value: #@ registry()
            - name: IMAGE_PULL_POLICY
              value: 'Always'
          #@ if name() == "piraeus":
          args:
            - startSatellite
          #@ end
          volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
            - name: init
              mountPath: /init
            - name: dockersock
              mountPath: /var/run/docker.sock
            - name: usr-src
              mountPath: /usr/src
            - name: lib-modules
              mountPath: /lib/modules
      containers:
        - name: node
          image: #@ satelliteimage()
          imagePullPolicy: Always
          securityContext:
            privileged: true
          resources:
            #! requests:
            #!   cpu: '500m'
            #!   memory: '500Mi'
            limits:
              cpu: 1
              memory: 1Gi
          env:
            - name: THIS_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LS_CONTROLLERS
              value: #@ controllerhostport()
            - name: DemoPool_Dir
              value: #@ "/var/local/" + name() + "/pools/DemoPool"
          #@ if name() == "piraeus":
          args:
            - startSatellite
          #@ end
          lifecycle:
              postStart:
                exec:
                  command:
                    - /init/cmd/poststart-node.sh
          readinessProbe:
            successThreshold: 3
            failureThreshold: 3
            tcpSocket:
              port: 3366
            initialDelaySeconds: 5
            periodSeconds: 1
          volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
            - name: init
              mountPath: /init
            - name: log
              mountPath: /var/log/linstor-satellite
            - name: #@ "var-local-" + name()
              mountPath: #@ "/var/local/" + name()
            - name: dev
              mountPath: /dev
            - name: lib-modules
              mountPath: /lib/modules
            #@ if map_host_lvm():
            - name: etc-lvm
              mountPath: /etc/lvm
            - name: run-lvm
              mountPath: /run/lvm
            #@ end
            #@ if map_host_linstor():
            - name: etc-drbd-d
              mountPath: /etc/drbd.d
            - name: var-lib-linstor-d
              mountPath: /var/lib/linstor.d
            - name: etc-linstor
              mountPath: /etc/linstor
            #@ end
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: init
          emptyDir: {}
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
            type: Socket
        - name: log
          hostPath:
            path: #@ "/var/log/"+ name() + "/linstor-satellite"
        - name: #@ "var-local-" + name()
          hostPath:
            path: #@ "/var/local/" + name()
        - name: dev
          hostPath:
            path: /dev
        - name: usr-sbin
          hostPath:
            path: /usr/sbin
        - name: usr-src
          hostPath:
            path: /usr/src
        - name: lib-modules
          hostPath:
            path: /lib/modules
        #@ if map_host_lvm():
        - name: etc-lvm
          hostPath:
            path: /etc/lvm
        - name: run-lvm
          hostPath:
            path: /run/lvm
        #@ end
        #@ if map_host_linstor():
        - name: etc-drbd-d
          hostPath:
            path: /etc/drbd.d
        - name: var-lib-linstor-d
          hostPath:
            path: /var/lib/linstor.d
        - name: etc-linstor
          hostPath:
            path: /etc/linstor
        #@ end
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: #@ name() + "/node"
                  operator: In
                  values:
                    - "true"
                - key: node-role.kubernetes.io/master
                  operator: DoesNotExist
      tolerations:
        - operator: "Exists"
          effect: "NoSchedule"
