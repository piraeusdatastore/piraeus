#@ load("funcs.lib.yml", "name", "etcd", "initimage")
---
kind: Namespace
apiVersion: v1
metadata:
  name: #@ name()
---
apiVersion: v1
kind: Service
metadata:
  name: #@ etcd()
  namespace: kube-system
  labels:
    app.kubernetes.io/name: #@ name()
    app.kubernetes.io/component: #@ etcd()
  annotations:
    #! create endpoints also if the related pod isn't ready
    #! service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2379
      targetPort: 2379
    - name: peer
      port: 2380
      targetPort: 2380
  selector:
    app.kubernetes.io/name: #@ name()
    app.kubernetes.io/component: #@ etcd()
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: #@ etcd()
  namespace: kube-system
  labels:
    app.kubernetes.io/name: #@ name()
    app.kubernetes.io/component: #@ etcd()
spec:
  serviceName: #@ etcd()
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: #@ name()
      app.kubernetes.io/component: #@ etcd()
  replicas: 3
  template:
    metadata:
      name: #@ etcd()
      labels:
        app.kubernetes.io/name: #@ name()
        app.kubernetes.io/component: #@ etcd()
    spec:
      priorityClassName: system-node-critical
      restartPolicy: Always
      #! dnsPolicy: ClusterFirst
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
        - name: init
          image: #@ initimage()
          imagePullPolicy: Always
          resources:
            #! requests:
            #!   cpu: 50m
            #!   memory: 50Mi
            limits:
              cpu: 100m
              memory: 100Mi
          env:
            - name: THIS_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: THIS_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: THIS_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: THIS_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: THIS_NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: ETCDCTL_API
              value: '3'
          volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
            - name: init
              mountPath: /init
      containers:
        - name: etcd
          image: quay.io/coreos/etcd:v3.3.18
          imagePullPolicy: Always
          resources:
            #! requests:
            #!   cpu: 100m
            #!   memory: 100Mi
            limits:
              cpu: 500m
              memory: 500Mi
          ports:
            - name: client
              containerPort: 2379
            - name: peer
              containerPort: 2380
          env:
            - name: ETCDCTL_API
              value: '3'
          command:
            - etcd
          args:
            - --config-file
            - /init/conf/etcd.conf
          lifecycle:
              postStart:
                exec:
                  command:
                    - /init/cmd/poststart-etcd.sh
              preStop:
                exec:
                  command:
                    - /init/cmd/prestop-etcd.sh
          readinessProbe:
            successThreshold: 3
            failureThreshold: 3
            httpGet:
              path: /health
              port: 2379
            initialDelaySeconds: 10
            periodSeconds: 1
          volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
            - name: init
              mountPath: /init
            - name: data
              mountPath: /var/run/etcd
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: init
          emptyDir: {}
        - name: data
          #! emptyDir: {}
          hostPath:
            path: /var/local/piraeus/etcd
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - #@ etcd()
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                #! - key: piraeus/etcd
                #!   operator: In
                #!   values:
                #!     - "true"
                - key: node-role.kubernetes.io/master
                  operator: DoesNotExist
      tolerations:
        - operator: "Exists"
          effect: "NoSchedule"
      #! imagePullSecrets:
      #!   - name: piraeus-regcred
